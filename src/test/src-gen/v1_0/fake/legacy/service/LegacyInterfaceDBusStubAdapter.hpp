/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.1.v201505270851.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef FAKE_LEGACY_SERVICE_Legacy_Interface_DBUS_STUB_ADAPTER_HPP_
#define FAKE_LEGACY_SERVICE_Legacy_Interface_DBUS_STUB_ADAPTER_HPP_

#include <v1_0/fake/legacy/service/LegacyInterfaceStub.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1_0 {
namespace fake {
namespace legacy {
namespace service {

typedef CommonAPI::DBus::DBusStubAdapterHelper<LegacyInterfaceStub> LegacyInterfaceDBusStubAdapterHelper;

class LegacyInterfaceDBusStubAdapterInternal
    : public virtual LegacyInterfaceStubAdapter,
      public LegacyInterfaceDBusStubAdapterHelper
{
public:
    LegacyInterfaceDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~LegacyInterfaceDBusStubAdapterInternal();

    virtual const bool hasFreedesktopProperties();




    const LegacyInterfaceDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        LegacyInterfaceStub,
        CommonAPI::Version
        > getLegacyInterfaceInterfaceVersionStubDispatcher;



static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    LegacyInterfaceStub,
    std::tuple<int32_t>,
    std::tuple<int32_t, int32_t>
    > testMethodStubDispatcher;
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    LegacyInterfaceStub,
    std::tuple<>,
    std::tuple<std::string, int32_t>
    > otherTestMethodStubDispatcher;
static CommonAPI::DBus::DBusMethodWithReplyStubDispatcher<
    LegacyInterfaceStub,
    std::tuple<>,
    std::tuple<>
    > finishStubDispatcher;




 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    LegacyInterfaceDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class LegacyInterfaceDBusStubAdapter
    : public LegacyInterfaceDBusStubAdapterInternal,
      public std::enable_shared_from_this<LegacyInterfaceDBusStubAdapter> {
public:
    LegacyInterfaceDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          LegacyInterfaceDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace service
} // namespace legacy
} // namespace fake
} // namespace v1_0

#endif // FAKE_LEGACY_SERVICE_Legacy_Interface_DBUS_STUB_ADAPTER_HPP_
