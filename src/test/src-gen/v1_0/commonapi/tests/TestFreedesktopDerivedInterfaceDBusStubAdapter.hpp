/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.1.v201505270851.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef COMMONAPI_TESTS_Test_Freedesktop_Derived_Interface_DBUS_STUB_ADAPTER_HPP_
#define COMMONAPI_TESTS_Test_Freedesktop_Derived_Interface_DBUS_STUB_ADAPTER_HPP_

#include <v1_0/commonapi/tests/TestFreedesktopDerivedInterfaceStub.hpp>
#include <v1_0/commonapi/tests/TestFreedesktopInterfaceDBusStubAdapter.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/DBus/DBusFactory.hpp>
#include <CommonAPI/DBus/DBusStubAdapterHelper.hpp>
#include <CommonAPI/DBus/DBusStubAdapter.hpp>
#include <CommonAPI/DBus/DBusFreedesktopStubAdapterHelper.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1_0 {
namespace commonapi {
namespace tests {

typedef CommonAPI::DBus::DBusStubAdapterHelper<TestFreedesktopDerivedInterfaceStub> TestFreedesktopDerivedInterfaceDBusStubAdapterHelper;

class TestFreedesktopDerivedInterfaceDBusStubAdapterInternal
    : public virtual TestFreedesktopDerivedInterfaceStubAdapter,
      public TestFreedesktopDerivedInterfaceDBusStubAdapterHelper,
      public TestFreedesktopInterfaceDBusStubAdapterInternal
{
public:
    TestFreedesktopDerivedInterfaceDBusStubAdapterInternal(
            const CommonAPI::DBus::DBusAddress &_address,
            const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
            const std::shared_ptr<CommonAPI::StubBase> &_stub);

    ~TestFreedesktopDerivedInterfaceDBusStubAdapterInternal();

    virtual const bool hasFreedesktopProperties();

    void fireTestAttributedFromDerivedInterfaceAttributeChanged(const uint32_t& value);



    const TestFreedesktopDerivedInterfaceDBusStubAdapterHelper::StubDispatcherTable& getStubDispatcherTable();
    const CommonAPI::DBus::StubAttributeTable& getStubAttributeTable();

    void deactivateManagedInstances();
    
    virtual const CommonAPI::Address &getAddress() const {
        return DBusStubAdapter::getAddress();
    }

    virtual void init(std::shared_ptr<DBusStubAdapter> instance) {
        return TestFreedesktopDerivedInterfaceDBusStubAdapterHelper::init(instance);
    }

    virtual void deinit() {
        return TestFreedesktopDerivedInterfaceDBusStubAdapterHelper::deinit();
    }

    virtual bool onInterfaceDBusMessage(const CommonAPI::DBus::DBusMessage& dbusMessage) {
        return TestFreedesktopDerivedInterfaceDBusStubAdapterHelper::onInterfaceDBusMessage(dbusMessage);
    }

    virtual bool onInterfaceDBusFreedesktopPropertiesMessage(const CommonAPI::DBus::DBusMessage& dbusMessage) {
        return TestFreedesktopDerivedInterfaceDBusStubAdapterHelper::onInterfaceDBusFreedesktopPropertiesMessage(dbusMessage);
    }

static CommonAPI::DBus::DBusGetAttributeStubDispatcher<
        TestFreedesktopDerivedInterfaceStub,
        CommonAPI::Version
        > getTestFreedesktopDerivedInterfaceInterfaceVersionStubDispatcher;

static CommonAPI::DBus::DBusGetFreedesktopAttributeStubDispatcher<
        TestFreedesktopDerivedInterfaceStub,
        uint32_t
        > getTestAttributedFromDerivedInterfaceAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetFreedesktopObservableAttributeStubDispatcher<
        TestFreedesktopDerivedInterfaceStub,
        uint32_t
        > setTestAttributedFromDerivedInterfaceAttributeStubDispatcher;

#ifdef WIN32
static CommonAPI::DBus::DBusGetFreedesktopAttributeStubDispatcher<
        TestFreedesktopDerivedInterfaceStub,
        uint32_t
        > getTestPredefinedTypeAttributeAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetFreedesktopObservableAttributeStubDispatcher<
        TestFreedesktopDerivedInterfaceStub,
        uint32_t
        > setTestPredefinedTypeAttributeAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetFreedesktopAttributeStubDispatcher<
        TestFreedesktopDerivedInterfaceStub,
        uint32_t
        > getTestReadonlyAttributeAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetFreedesktopAttributeStubDispatcher<
        TestFreedesktopDerivedInterfaceStub,
        ::commonapi::tests::DerivedTypeCollection::TestStructExtended
        > getTestDerivedStructAttributeAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetFreedesktopObservableAttributeStubDispatcher<
        TestFreedesktopDerivedInterfaceStub,
        ::commonapi::tests::DerivedTypeCollection::TestStructExtended
        > setTestDerivedStructAttributeAttributeStubDispatcher;
static CommonAPI::DBus::DBusGetFreedesktopAttributeStubDispatcher<
        TestFreedesktopDerivedInterfaceStub,
        ::commonapi::tests::DerivedTypeCollection::TestArrayUInt64
        > getTestDerivedArrayAttributeAttributeStubDispatcher;
static CommonAPI::DBus::DBusSetFreedesktopObservableAttributeStubDispatcher<
        TestFreedesktopDerivedInterfaceStub,
        ::commonapi::tests::DerivedTypeCollection::TestArrayUInt64
        > setTestDerivedArrayAttributeAttributeStubDispatcher;
#endif


#ifdef WIN32
#endif


#ifdef WIN32
#endif

 protected:
    virtual const char* getMethodsDBusIntrospectionXmlData() const;

 private:
    TestFreedesktopDerivedInterfaceDBusStubAdapterHelper::StubDispatcherTable stubDispatcherTable_;
    CommonAPI::DBus::StubAttributeTable stubAttributeTable_;
};

class TestFreedesktopDerivedInterfaceDBusStubAdapter
    : public TestFreedesktopDerivedInterfaceDBusStubAdapterInternal,
      public std::enable_shared_from_this<TestFreedesktopDerivedInterfaceDBusStubAdapter> {
public:
    TestFreedesktopDerivedInterfaceDBusStubAdapter(
    	const CommonAPI::DBus::DBusAddress &_address,
        const std::shared_ptr<CommonAPI::DBus::DBusProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub)
    	: CommonAPI::DBus::DBusStubAdapter(
    		_address, 
    		_connection,
            false),
          TestFreedesktopDerivedInterfaceDBusStubAdapterInternal(
          	_address, 
          	_connection, 
          	_stub) { 
    }
};

} // namespace tests
} // namespace commonapi
} // namespace v1_0

#endif // COMMONAPI_TESTS_Test_Freedesktop_Derived_Interface_DBUS_STUB_ADAPTER_HPP_
