/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.2.v201507021046.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef COMMONAPI_TESTS_MANAGED_LEAF_INTERFACE_HPP_
#define COMMONAPI_TESTS_MANAGED_LEAF_INTERFACE_HPP_




#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Types.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1_0 {
namespace commonapi {
namespace tests {
namespace managed {

class LeafInterface {
public:
    virtual ~LeafInterface() { }

    static inline const char* getInterface();
    static inline CommonAPI::Version getInterfaceVersion();
    
    struct testLeafMethodError : CommonAPI::Enumeration<int32_t> {
        enum Literal : int32_t {
            OK = 0,
            NOTOK = 1
        };
        
        testLeafMethodError() = default;
        testLeafMethodError(const Literal &_value) 
            : CommonAPI::Enumeration<int32_t>(static_cast<int32_t>(_value)) {}
    
        inline bool operator==(const testLeafMethodError &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const testLeafMethodError &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const testLeafMethodError &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const testLeafMethodError &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const testLeafMethodError &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const testLeafMethodError &_other) const { return (value_ > _other.value_); }
        
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast<int32_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast<int32_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast<int32_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast<int32_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast<int32_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast<int32_t>(_value)); }
    };
};

const char* LeafInterface::getInterface() {
    return ("commonapi.tests.managed.LeafInterface");
}

CommonAPI::Version LeafInterface::getInterfaceVersion() {
    return CommonAPI::Version(1, 0);
}


} // namespace managed
} // namespace tests
} // namespace commonapi
} // namespace v1_0

namespace CommonAPI {
}

#endif // COMMONAPI_TESTS_MANAGED_LEAF_INTERFACE_HPP_
