/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.2.v201507021046.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#include "DerivedTypeCollection.hpp"


namespace commonapi {
namespace tests {


bool DerivedTypeCollection::TestStructExtended::operator==(const DerivedTypeCollection::TestStructExtended& _other) const {
	return (getTestString() == _other.getTestString() && getUintValue() == _other.getUintValue() && getTestEnumExtended2() == _other.getTestEnumExtended2());
}


bool DerivedTypeCollection::TestStruct::operator==(const DerivedTypeCollection::TestStruct& _other) const {
	return (getTestString() == _other.getTestString() && getUintValue() == _other.getUintValue());
}

std::shared_ptr<DerivedTypeCollection::TestPolymorphicStruct> DerivedTypeCollection::TestPolymorphicStruct::create(CommonAPI::Serial _serial) {
	switch (_serial) {
	case DerivedTypeCollection::TESTPOLYMORPHICSTRUCT_SERIAL:
		return std::make_shared<DerivedTypeCollection::TestPolymorphicStruct>();
	case TESTEXTENDEDPOLYMORPHICSTRUCT_SERIAL:
		return std::make_shared<DerivedTypeCollection::TestExtendedPolymorphicStruct>();
	default:
		break;
	}
	return std::shared_ptr<DerivedTypeCollection::TestPolymorphicStruct>();
}

bool DerivedTypeCollection::TestPolymorphicStruct::operator==(const DerivedTypeCollection::TestPolymorphicStruct& _other) const {
	return (getTestString() == _other.getTestString() && getUintValue() == _other.getUintValue());
}


bool DerivedTypeCollection::TestExtendedPolymorphicStruct::operator==(const DerivedTypeCollection::TestExtendedPolymorphicStruct& _other) const {
	return (getTestString() == _other.getTestString() && getUintValue() == _other.getUintValue() && getAdditionalValue() == _other.getAdditionalValue());
}


bool DerivedTypeCollection::StructWithPolymorphicMember::operator==(const DerivedTypeCollection::StructWithPolymorphicMember& _other) const {
	return (getNumberValue() == _other.getNumberValue() && getPolymorphicMember() == _other.getPolymorphicMember());
}


bool DerivedTypeCollection::StructWithEnumKeyMap::operator==(const DerivedTypeCollection::StructWithEnumKeyMap& _other) const {
	return (getTestMap() == _other.getTestMap());
}


} // namespace tests
} // namespace commonapi
